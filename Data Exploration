# Common imports needed
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import os
from os import path
import sys  

# For plotting and exploring data
import plotly
import plotly.express
from pathlib import Path


# Load first dataset
cornell = pd.read_csv("cornell_data.csv", na_values = '[]')
cornell.shape

# Load second dataset
cornell_extended = pd.read_csv("cornell_extended.csv", na_values = '[]')
cornell_extended.shape

# Concatenates both datasets into one dataset
full_df = pd.concat([cornell, cornell_extended], axis=0, join="inner", ignore_index=True)
full_df.shape

# First look of the dataset with 29 columns and 45,159 columns
full_df.head()

# Descriptive statistics for the dataset
full_df.describe()

# Summary of the dataset
full_df.info()

# Detect missing values in columns
full_df.isna().sum()

# Count of different audio file types
full_df['file_type']. value_counts()

# View species counts and average
print(full_df['species'].value_counts())
print("")
print("The average number of audio files per species:",full_df['species'].value_counts().mean())

# Species count distribution
sns.set_theme(style="darkgrid")
plt.subplots(figsize =(25, 10))
sns.countplot(data = full_df, x = "ebird_code")

mean = full_df['species'].value_counts().mean()

plt.title("Species")
plt.xticks(rotation=90)
plt.axhline(mean, color='r', linestyle='-')
plt.show()

# View sampling rate counts
full_df['sampling_rate'].value_counts()

# Sampling rate distribution
plt.figure(figsize=(15,5))
sns.countplot(data = full_df, x = "sampling_rate", palette = 'colorblind')

plt.title("Sampling_rate")
plt.xticks(rotation=90)     
plt.show()

# View audio rating counts and average
print(full_df['rating'].value_counts().sort_index())
print("")
print("The average audio file rating:", full_df['rating'].mean())

# Audio rating distribution
plt.subplots(figsize = (12, 5))
sns.countplot(data = full_df, x = "rating", palette = 'colorblind')

plt.title("Audio Rating")
plt.axvline(7.3, color='r', linestyle='-')
plt.show()

# Plots distribution of audio recordings on a world map using latitude and longitude
fig = plotly.express.scatter_geo(full_df, lat = 'latitude',lon = 'longitude')
fig.update_layout(title = 'Audio Recording Locations', title_x = 0.5)
fig.show()
